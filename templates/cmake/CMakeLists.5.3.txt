# ===================================================
# Lua 5.3 Specific Configuration
# ===================================================
# Applied after base template - contains 5.3-specific settings
# ===================================================

# 1. COMPATIBILITY SETTINGS
# Maintain compatibility with Lua 5.2 APIs
target_compile_definitions(lua PRIVATE LUA_COMPAT_5_2)

# 2. VERSION PROPERTIES
set_target_properties(lua PROPERTIES
    VERSION "${LUA_VERSION}"
    SOVERSION "5.3"
)

# 3. INTEGER TYPE CONFIGURATION
option(LUA_32BITS "Use 32-bit integers instead of 64-bit" OFF)
if(LUA_32BITS)
    target_compile_definitions(lua PRIVATE LUA_32BITS)
else()
    target_compile_definitions(lua PRIVATE LUA_C89_NUMBERS)
endif()

# 4. CORE LIBRARIES
# 4.1 Bitwise Operations
target_compile_definitions(lua PRIVATE LUA_USE_BITWISE_OPERATORS)

# 4.2 UTF-8 Support
target_compile_definitions(lua PRIVATE LUA_USE_UTF8_LIB)
list(APPEND LUA_CORE_SOURCES "src/lutf8lib.c")

# 4.3 Math Library Updates
target_compile_definitions(lua PRIVATE
    LUA_USE_MATH_HUGE_VAL
    LUA_USE_MATH_NAN
)

# 5. MODULE SYSTEM ENHANCEMENTS
target_compile_definitions(lua PRIVATE
    LUA_USE_MODULE_LOADERS
    LUA_USE_PACKAGE_SEARCHERS
)

# 6. PERFORMANCE OPTIMIZATIONS
# 6.1 Garbage Collector
target_compile_definitions(lua PRIVATE LUA_USE_INCREMENTAL_GC)

# 6.2 Stack Management
target_compile_definitions(lua PRIVATE LUA_USE_STACK_RESIZE_OPTIMIZATION)

# 7. DEBUGGING ENHANCEMENTS
target_compile_definitions(lua PRIVATE
    LUA_USE_DEBUG_EXTRA
    LUA_USE_TRACE_EXECUTION
)

# 8. PLATFORM-SPECIFIC CONFIGURATION
if(WIN32)
    # 8.1 UTF-8 Console Support
    target_compile_definitions(lua PRIVATE LUA_USE_WINDOWS_UTF8)

    # 8.2 Math Library Linking
    target_link_libraries(lua m)

    # 8.3 Stack Size (4MB)
    set_target_properties(lua PROPERTIES LINK_FLAGS "/STACK:4194304")
else()
    # 8.4 POSIX-specific Settings
    target_compile_definitions(lua PRIVATE LUA_USE_POSIX)

    # 8.5 Stack Size (4MB)
    set_target_properties(lua PROPERTIES LINK_FLAGS "-Wl,--stack-size,4194304")
endif()

# 9. COMPILER FLAGS
if(CMAKE_C_COMPILER_ID MATCHES "GNU|Clang")
    # 9.1 General Optimization
    target_compile_options(lua PRIVATE
        -O2
        -fno-strict-aliasing
    )

    # 9.2 Warnings and Diagnostics
    target_compile_options(lua PRIVATE
        -Wno-deprecated-declarations
        -Wno-format-truncation
    )

    # 9.3 Position Independent Code
    if(BUILD_SHARED_LIBS)
        target_compile_options(lua PRIVATE -fPIC)
    endif()

    # 9.4 Link-Time Optimization
    set_target_properties(lua PROPERTIES
        INTERPROCEDURAL_OPTIMIZATION_RELEASE TRUE
    )

elseif(MSVC)
    # 9.5 MSVC-specific Flags
    target_compile_options(lua PRIVATE
        /O2
        /wd4996   # _CRT_SECURE_NO_WARNINGS
        /wd4146   # unary minus operator applied to unsigned type
        /wd4244   # conversion from 'lua_Integer' to 'int', possible loss of data
    )
endif()

# 10. STANDARD COMPLIANCE
set_target_properties(lua PROPERTIES
    C_STANDARD 99
    C_STANDARD_REQUIRED ON
    C_EXTENSIONS OFF
)

# 11. TEST SUITE INTEGRATION
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/src/ltests.c")
    list(APPEND LUA_CORE_SOURCES "src/ltests.c")
endif()

# 12. DEPRECATION HANDLING
if(MSVC)
    target_compile_options(lua PRIVATE /wd4996)  # Disable deprecated warnings
else()
    target_compile_options(lua PRIVATE -Wno-deprecated-declarations)
endif()

# 13. INSTALLATION ENHANCEMENTS
install(FILES
    src/lprefix.h
    src/ltests.h
    DESTINATION include
)

# ===================================================
# END Lua 5.3 Configuration
# ===================================================
